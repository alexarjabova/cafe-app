In scope of learning path crated cafe-app to gain knowledge about different Design patterns.

Information sources:
    https://springframework.guru/gang-of-four-design-patterns/builder-pattern/
    https://www.geeksforgeeks.org/
    https://www.baeldung.com/design-patterns-series

Used patterns:

1) Creational Design Pattern - BUILDER PATTERN
    Main idea: Separate the construction of a complex object from its representation so that the
    same construction process can create different representations.
    More info: https://www.geeksforgeeks.org/builder-design-pattern/

2) Structural Design Pattern - COMPOSITE PATTERN
    Main idea: Compose objects into tree structures to represent part-whole hierarchies.
    Composite lets clients treat individual objects and compositions of objects uniformly
    More info: https://www.geeksforgeeks.org/composite-design-pattern/

3) Structural Design Pattern - DECORATOR PATTERN
    Main idea: Attach additional responsibilities to an object dynamically.
    Decorators provide a flexible alternative to subclassing for extending functionality.
    More info: https://www.geeksforgeeks.org/decorator-design-pattern-in-java-with-example/

4) Behavior Design Pattern - COMMAND PATTERN
    Main idea: Encapsulate a request as an object, thereby letting you parameterize clients
    with different requests, queue or log requests, and support undoable operations.
    More info: https://www.geeksforgeeks.org/command-pattern/


5) Behavior Design Pattern - MEDIATOR PATTERN
    Main idea: Define an object that encapsulates how a set of objects interact.
    Mediator promotes loose coupling by keeping objects from referring to each other explicitly,
    and it lets you vary their interaction independently.
    More info: https://www.geeksforgeeks.org/mediator-design-pattern/

